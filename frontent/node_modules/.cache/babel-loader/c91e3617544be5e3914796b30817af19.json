{"ast":null,"code":"import jwt_decode from \"jwt-decode\";\nimport { RestRequest } from \"./requests\";\nimport { endpoints } from \"./endpoints\";\nimport Axios from \"axios\";\n\nconst getUserFromStorage = () => {\n  let token = localStorage.getItem('Jwt token');\n  if (!token) return null;\n  let data = jwt_decode(token);\n  let user = {\n    name: data.name,\n    surname: data.surname,\n    email: data.email\n  };\n  return user;\n};\n\nconst afterLogin = response => {\n  if (response.data.token) {\n    localStorage.setItem('Jwt token', `${response.data.token}`);\n  }\n\n  return response;\n};\n\nconst registration = (name, surname, email, password) =>\n/*RestRequest.post(endpoints.registration, {}, {name, surname, email, password})\n    .then(afterLogin);*/\nAxios.post(endpoints.registration, {\n  name: name,\n  surname: surname,\n  email: email,\n  password: password\n}, {\n  headers: {}\n}).then(response => {\n  console.log(response.data);\n  afterLogin(response);\n  ;\n});\n\nconst login = (email, password) => RestRequest.post(endpoints.login, {}, {\n  email,\n  password\n}).then(afterLogin);\n\nconst logout = () => {\n  localStorage.removeItem('Jwt token');\n};\n\nexport default {\n  login,\n  getUserFromStorage,\n  registration,\n  logout\n};","map":{"version":3,"sources":["/Users/ilyayelagov/webprojects/mpp_bare/frontent/src/connection/auth.js"],"names":["jwt_decode","RestRequest","endpoints","Axios","getUserFromStorage","token","localStorage","getItem","data","user","name","surname","email","afterLogin","response","setItem","registration","password","post","headers","then","console","log","login","logout","removeItem"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAAQC,WAAR,QAA0B,YAA1B;AACA,SAAQC,SAAR,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAC7B,MAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAZ;AACA,MAAI,CAACF,KAAL,EAAY,OAAO,IAAP;AACZ,MAAIG,IAAI,GAAGR,UAAU,CAACK,KAAD,CAArB;AACA,MAAII,IAAI,GAAG;AACPC,IAAAA,IAAI,EAAEF,IAAI,CAACE,IADJ;AAEPC,IAAAA,OAAO,EAAEH,IAAI,CAACG,OAFP;AAGPC,IAAAA,KAAK,EAAEJ,IAAI,CAACI;AAHL,GAAX;AAKA,SAAOH,IAAP;AACH,CAVD;;AAYA,MAAMI,UAAU,GAAGC,QAAQ,IAAI;AAC3B,MAAIA,QAAQ,CAACN,IAAT,CAAcH,KAAlB,EAAyB;AACrBC,IAAAA,YAAY,CAACS,OAAb,CAAqB,WAArB,EAAmC,GAAED,QAAQ,CAACN,IAAT,CAAcH,KAAM,EAAzD;AACH;;AACD,SAAOS,QAAP;AACH,CALD;;AAMA,MAAME,YAAY,GAAG,CAACN,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,EAAuBK,QAAvB;AACjB;;AAEJd,KAAK,CAACe,IAAN,CAAWhB,SAAS,CAACc,YAArB,EACI;AAACN,EAAAA,IAAI,EAAEA,IAAP;AAAaC,EAAAA,OAAO,EAAEA,OAAtB;AAA+BC,EAAAA,KAAK,EAAEA,KAAtC;AAA6CK,EAAAA,QAAQ,EAAEA;AAAvD,CADJ,EAEI;AAACE,EAAAA,OAAO,EAAE;AAAV,CAFJ,EAEmBC,IAFnB,CAEwBN,QAAQ,IAAI;AAChCO,EAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACN,IAArB;AACAK,EAAAA,UAAU,CAACC,QAAD,CAAV;AACA;AACH,CAND,CAHA;;AAWA,MAAMS,KAAK,GAAG,CAACX,KAAD,EAAQK,QAAR,KACVhB,WAAW,CAACiB,IAAZ,CAAiBhB,SAAS,CAACqB,KAA3B,EAAkC,EAAlC,EAAsC;AAACX,EAAAA,KAAD;AAAQK,EAAAA;AAAR,CAAtC,EACKG,IADL,CACUP,UADV,CADJ;;AAIA,MAAMW,MAAM,GAAG,MAAM;AACjBlB,EAAAA,YAAY,CAACmB,UAAb,CAAwB,WAAxB;AACH,CAFD;;AAGA,eAAe;AACXF,EAAAA,KADW;AAEXnB,EAAAA,kBAFW;AAGXY,EAAAA,YAHW;AAIXQ,EAAAA;AAJW,CAAf","sourcesContent":["import jwt_decode from \"jwt-decode\";\nimport {RestRequest} from \"./requests\";\nimport {endpoints} from \"./endpoints\";\nimport Axios from \"axios\";\n\nconst getUserFromStorage = () => {\n    let token = localStorage.getItem('Jwt token');\n    if (!token) return null;\n    let data = jwt_decode(token);\n    let user = {\n        name: data.name,\n        surname: data.surname,\n        email: data.email\n    };\n    return user;\n};\n\nconst afterLogin = response => {\n    if (response.data.token) {\n        localStorage.setItem('Jwt token', `${response.data.token}`);\n    }\n    return response;\n};\nconst registration = (name, surname, email, password) =>\n    /*RestRequest.post(endpoints.registration, {}, {name, surname, email, password})\n        .then(afterLogin);*/\nAxios.post(endpoints.registration,\n    {name: name, surname: surname, email: email, password: password},\n    {headers: {}}).then(response => {\n    console.log(response.data);\n    afterLogin(response);\n    ;\n});\n\nconst login = (email, password) =>\n    RestRequest.post(endpoints.login, {}, {email, password})\n        .then(afterLogin);\n\nconst logout = () => {\n    localStorage.removeItem('Jwt token');\n};\nexport default {\n    login,\n    getUserFromStorage,\n    registration,\n    logout\n}\n"]},"metadata":{},"sourceType":"module"}